#!/usr/bin/env ruby
# frozen_string_literal: true

Dir.chdir(File.dirname(__dir__))

BASE_DIR = Dir.pwd.freeze
LIB_NAME = File.basename(Dir[File.join(BASE_DIR, '*.gemspec')].first, '.gemspec').freeze
GEMSPEC_FILES = (Dir[File.join(BASE_DIR, '*.gemspec')] +
  Dir[File.join(BASE_DIR, "#{LIB_NAME}-*", '*.gemspec')]).freeze
VERSION_FILES = Dir[File.join(BASE_DIR, "{.,#{LIB_NAME}-*}", 'VERSION')].freeze
VERSION_FILE_RUBY = File.join(BASE_DIR, 'lib', LIB_NAME, 'version.rb').freeze
CHANGELOG_FILE = File.join(BASE_DIR, 'CHANGELOG.md').freeze
TEST_COMMAND = File.join(BASE_DIR, 'bin', 'test').freeze

OLD_VERSION = File.read(VERSION_FILES.first).strip.freeze
major, minor, patch = OLD_VERSION.split('.').map(&:to_i)
NEW_VERSION =
  case ARGV.first&.to_sym
  when :major      then "#{major + 1}.0.0"
  when :minor      then "#{major}.#{minor + 1}.0"
  when :patch, nil then "#{major}.#{minor}.#{patch + 1}"
  else abort('Usage: bin/build [major | minor | patch]')
  end.freeze

############################################################################################################
## Tasks                                                                                                  ##
############################################################################################################

def test
  task(
    command: TEST_COMMAND,
    preamble: 'Running tests...',
    success: 'Tests passed',
  )
end

def update_version(version = NEW_VERSION, quiet: false)
  begin_task('Updating version number...') unless quiet

  VERSION_FILES.each do |version_file|
    File.write(version_file, "#{version}\n")
  end

  ruby = File.read(VERSION_FILE_RUBY)
  ruby.sub!(/(?<=VERSION = (['"]))(\d+\.\d+\.\d+)(?=\1)/, version)
  File.write(VERSION_FILE_RUBY, ruby)

  finish_task('Version number updated') unless quiet
end

def update_changelog
  content = File.read(CHANGELOG_FILE)
  content.sub!(
    "## Upcoming (Unreleased)\n",
    <<~MARKDOWN
      \\0
      * Nothing yet

      ## #{NEW_VERSION} (#{Time.now.strftime('%Y %B %-d')})
    MARKDOWN
  )

  File.write(CHANGELOG_FILE, content)
end

def build
  multiple = GEMSPEC_FILES.size > 1

  GEMSPEC_FILES.each do |gemspec_file|
    lib_name = File.basename(gemspec_file, '.gemspec')

    task(
      command: ["cd #{File.dirname(gemspec_file)}", "gem build #{File.basename(gemspec_file)}"],
      preamble: "Building Ruby gem#{" (#{lib_name})" if multiple}...",
      success: "Ruby gem built (#{lib_name}-#{NEW_VERSION}.gem)",
    )
  end
ensure
  update_version(OLD_VERSION, quiet: true) if $CHILD_STATUS.exitstatus != 0
end

############################################################################################################
## Utils                                                                                                  ##
############################################################################################################

def task(command:, preamble: nil, success: nil, failure: nil)
  begin_task(preamble) if preamble
  system(Array(command).join(' && '))

  if $CHILD_STATUS.exitstatus != 0
    finish_task($CHILD_STATUS.exitstatus, failure)
  elsif success
    finish_task(success)
  end
end

def begin_task(str)
  puts("\e[33m\u270e #{str}\e[39m")
end

def finish_task(*args)
  status = args.first.kind_of?(Integer) ? args.shift : 0
  message = args.shift

  if status == 0
    puts("\e[32m\u2714 #{message}\e[39m")
  else
    puts("\e[31m\u2718 #{message || 'Build aborted'}\e[39m")
    exit(status)
  end
end

############################################################################################################

test
update_version
update_changelog
build

finish_task("Version #{NEW_VERSION} built successfully!")
